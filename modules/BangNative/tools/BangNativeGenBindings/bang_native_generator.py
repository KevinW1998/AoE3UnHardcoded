import io

from bang_native_parser import BangNativeEntry, BangNativeReg, BangNativeMethodType


class BangNativeGenerator:
    def __init__(self, sym_table_header_filename, def_filename, ptr_alloc, ptr_array_alloc, ptr_delete):
        self._sym_table_cpp_filename = sym_table_header_filename
        self._def_filename = def_filename
        self._ptr_alloc = ptr_alloc
        self._ptr_array_alloc = ptr_array_alloc
        self._ptr_delete = ptr_delete

    def get_correct_mangling_of_entry(self, bang_entry):
        """

        :param bang_entry:
        :type bang_entry: BangNativeEntry
        :return:
        """
        if bang_entry.method_type == BangNativeMethodType.DESTRUCTOR:
            if bang_entry.is_virtual:
                return "??1%s@@UAE@XZ" % bang_entry.class_name
            else:
                return "??1%s@@QAE@XZ" % bang_entry.class_name
        return bang_entry.method_mangling

    def generate(self, pack_classes):
        """

        :param pack_classes:
        :type pack_classes: dict[str, list[BangNativeEntry]]
        :return:
        """

        # Generate def file
        with io.open(self._def_filename, "w") as def_file:
            # Header
            def_file.write('; THIS IS AN AUTOGENERATED FILE\n; DO NOT EDIT\n\n')
            def_file.write('EXPORTS\n')

            for class_name, clazz in sorted(pack_classes.items()):
                def_file.write('\t; == ' + class_name + ' ==\n')
                for bang_entry in clazz.entries:
                    def_file.write('\t' + self.get_correct_mangling_of_entry(bang_entry) + '\n')
                def_file.write('\t??2%s@@SAPAXI@Z\n' % class_name)
                def_file.write('\t??_U%s@@SAPAXI@Z\n' % class_name)
                def_file.write('\t??3%s@@SAXPAX@Z\n' % class_name)
                def_file.write('\t??_V%s@@SAXPAX@Z\n' % class_name)

        with io.open(self._sym_table_cpp_filename, "w") as cpp_file:
            cpp_file.write('#pragma once\n')
            # cpp_file.write('#include <XLivePatchAPI.h>\n\n')
            cpp_file.write('// THIS IS AN AUTOGENERATED FILE\n// DO NOT EDIT\n\n')
            cpp_file.write('#define BANG_NATIVE_SYM_ELEMENTS(TF_SIMPLE, TF_CUSTOM) \\\n')
            for class_name, clazz in sorted(pack_classes.items()):
                cpp_file.write('\t/* == ' + class_name + ' == */ \\\n')
                for bang_entry in clazz.entries:
                    use_tf = False
                    if bang_entry.custom_return_register == BangNativeReg.EAX and len(
                            bang_entry.custom_param_registers) == 0:
                        use_tf = True
                    # if "addBMode" in bang_entry.method_name:
                        # print(bang_entry)

                    gen_binding_code = ""
                    if use_tf:
                        gen_binding_code = 'TF_SIMPLE(0x%x)' % bang_entry.binding_address
                    else:
                        return_type = bang_entry.return_type.get_primitive()
                        if bang_entry.method_type == BangNativeMethodType.CONSTRUCTOR:
                            return_type = "void*"

                        type_list = [return_type] + list(map(lambda x: x.get_primitive(), bang_entry.param_types))
                        # if bang_entry.method_type == BangNativeMethodType.CONSTRUCTOR:
                        type_list.insert(1, "void*") # Always void* as this?

                        param_reg_list = list(map(lambda x: x.name, bang_entry.custom_param_registers)) + ["GENERIC_PARAM"] * ((len(type_list) - 1) - len(bang_entry.custom_param_registers))
                        param_reg_list_with_namespace = list(map(lambda x: "X86Register::" + x, param_reg_list))

                        gen_binding_code = ('TF_CUSTOM<0x%x, %s>(patchManager, X86Register::'
                                            % (bang_entry.binding_address, ', '.join(type_list))) + bang_entry.custom_return_register.name
                        gen_binding_code += ", {" + ', '.join(param_reg_list_with_namespace) + "}"
                        gen_binding_code += ", " + 'true' if bang_entry.callee_cleanups else 'false'
                        gen_binding_code += ')'

                    cpp_file.write(
                        '\t{ "%s", %s },\\\n' % (self.get_correct_mangling_of_entry(bang_entry), gen_binding_code))
                cpp_file.write('\t{ "??2%s@@SAPAXI@Z", TF_SIMPLE(0x%x) },\\\n' % (class_name, self._ptr_alloc))
                cpp_file.write('\t{ "??_U%s@@SAPAXI@Z", TF_SIMPLE(0x%x) },\\\n' % (class_name, self._ptr_array_alloc))
                cpp_file.write('\t{ "??3%s@@SAXPAX@Z", TF_SIMPLE(0x%x) },\\\n' % (class_name, self._ptr_delete))
                cpp_file.write('\t{ "??_V%s@@SAXPAX@Z", TF_SIMPLE(0x%x) },\\\n' % (class_name, self._ptr_delete))

            cpp_file.write('\t{ "", 0x0 }\n\n')
